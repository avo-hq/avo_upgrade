require "fileutils"

# class generated by ChatGPT. Update it as you see fit.
module AvoUpgrade
  class UpgradeTool
    class << self
      def run
        upgrade_tool = new
        print upgrade_tool.summary
        puts "Please make sure you commited all your changes before running this upgrade."
        print "Do you want to run this upgrade? [y/n]: "
        input = gets.chomp
        return unless input == "y" || input == "Y"
        upgrade_tool.run
      end
    end

    def avo_global_files
      Dir.glob(File.join(Rails.root.join("app", "avo"), '**/*')).select { |f| File.file?(f) } +
      Dir.glob(File.join(Rails.root.join("app", "controllers", "avo"), '**/*')).select { |f| File.file?(f) } +
      Dir.glob(File.join(Rails.root.join("app", "views", "avo"), '**/*')).select { |f| File.file?(f) }
    end

    def class_names_for(component)
      names = []

      Dir.glob(File.join(send("#{component}_path"), '**/*.rb')).each do |file|
        # Match class definitions in the file
        File.read(file).scan(/class\s+(\w+)/).each do |match|
          # Add the matched class names to the list
          names << match.first
        end
      end

      names
    end

    # Dynamicly create path method for each component
    # def resources_path, def actions_path, def filters_path, def resource_tools_path def dashboards_path, def cards_path
    [:resources, :actions, :filters, :resource_tools, :dashboards, :cards].each do |component|
      define_method "#{component}_path" do
        Rails.root.join("app", "avo", component.to_s)
      end
    end

    def files_from(path)
      Dir.glob("#{path}/*.rb").select { |file| File.file?(file) }
    end

    def replace_text_on(files, hash, exact_match: true)
      files.each do |file|
        text = File.read(file)

        hash.each do |old_text, new_text|
          old_text = /\b#{Regexp.escape(old_text)}\b/ if exact_match
          text.gsub!(old_text, new_text)
        end

        File.open(file, 'w') { |f| f.write(text) }
      end
    end

    def remove_text_on(files, text_array)
      replace_text_on(files, text_array.map { |text| [text, ""] }.to_h, exact_match: false)
    end

    def replace_in_filename(old_text, new_text, path:)
      Dir.glob("#{path}/*.rb").each do |file_path|
        `git mv #{file_path} #{file_path.gsub(/#{old_text}/, new_text)}`
      end
    end
  end
end
